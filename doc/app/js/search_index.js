var search_data = {"index":{"searchIndex":["admincontroller","applicationcontroller","applicationhelper","bracket","bracketcontest","bracketcontestant","bracketcontestscontroller","bracketcontestshelper","bracketscontroller","bracketshelper","competition","competitionscontroller","competitionshelper","contest","contestant","customer","customerscontroller","customershelper","displaycontroller","displayhelper","grouping","groupingscontroller","groupingshelper","navitem","nestedcontroller","nestedmodel","regularcontest","regularcontestant","regularcontestscontroller","regularcontestshelper","resultscontroller","resultshelper","resultsrecord","team","teamscontroller","teamshelper","validdate","validdatescontroller","validdateshelper","venue","venuescontroller","venueshelper","welcomecontroller","welcomehelper","admin_link_array()","advance_contestants()","all()","all_participant_codes()","all_subgroupings()","all_teams()","as_contestants()","authenticate()","away_team_id()","awaycontestant_fullname()","cancel()","change_password()","choose_competition()","choose_customer()","contest()","contestant_class()","contestantlabel()","contestanttype()","create()","create()","create()","create()","create()","create()","create()","create()","default_bracket()","default_comp()","default_comp()","default_comp()","default_comp()","default_comp()","default_comp()","default_comp()","default_cust()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","display_date()","display_link_array()","display_time()","draw()","draws()","dump()","dump()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","fullname()","fullname()","fullname()","fullname()","greet()","grouping()","has_score?()","has_subgroupings?()","has_teams?()","hierarchy()","home_team_id()","homecontestant_fullname()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","instructions()","login()","login()","login()","logout()","logout()","loss()","losses()","navpanel()","nav_panel()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_hash()","nav_link_to_grouping()","navitem()","needs_score?()","nested_groupings()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_competition()","opponent()","password()","password=()","pct()","playoffbracketlabels()","points()","poolgroupseasonlabels()","priorcontest()","record_result()","record_result()","report()","rescord()","result_headings()","result_row()","roundrobin()","rrobin()","scorect()","scorer_link_array()","set_bracket()","set_competition()","show()","show()","show()","show()","show()","show()","show()","show()","statuses()","subgroupings()","team()","teamname()","teams()","times()","top_grouping()","update()","update()","update()","update()","update()","update()","update()","update()","venue_name()","win()","wins()","readme"],"longSearchIndex":["admincontroller","applicationcontroller","applicationhelper","bracket","bracketcontest","bracketcontestant","bracketcontestscontroller","bracketcontestshelper","bracketscontroller","bracketshelper","competition","competitionscontroller","competitionshelper","contest","contestant","customer","customerscontroller","customershelper","displaycontroller","displayhelper","grouping","groupingscontroller","groupingshelper","navitem","nestedcontroller","nestedmodel","regularcontest","regularcontestant","regularcontestscontroller","regularcontestshelper","resultscontroller","resultshelper","resultsrecord","team","teamscontroller","teamshelper","validdate","validdatescontroller","validdateshelper","venue","venuescontroller","venueshelper","welcomecontroller","welcomehelper","applicationcontroller#admin_link_array()","bracketcontest#advance_contestants()","bracket::all()","bracket#all_participant_codes()","grouping#all_subgroupings()","grouping#all_teams()","team#as_contestants()","customer::authenticate()","contest#away_team_id()","contest#awaycontestant_fullname()","regularcontestscontroller#cancel()","customerscontroller#change_password()","displaycontroller#choose_competition()","displaycontroller#choose_customer()","contestant#contest()","contest#contestant_class()","bracketcontestant#contestantlabel()","bracketcontestant#contestanttype()","bracketcontestscontroller#create()","competitionscontroller#create()","customerscontroller#create()","groupingscontroller#create()","regularcontestscontroller#create()","teamscontroller#create()","validdatescontroller#create()","venuescontroller#create()","bracketcontest::default_bracket()","contest::default_comp()","contestant::default_comp()","grouping::default_comp()","nestedmodel::default_comp()","team::default_comp()","validdate::default_comp()","venue::default_comp()","competition::default_cust()","bracketcontestscontroller#destroy()","competitionscontroller#destroy()","groupingscontroller#destroy()","regularcontestscontroller#destroy()","teamscontroller#destroy()","validdatescontroller#destroy()","venuescontroller#destroy()","contest#display_date()","applicationcontroller#display_link_array()","contest#display_time()","contestant#draw()","team#draws()","bracketcontestscontroller#dump()","regularcontestscontroller#dump()","bracketcontestscontroller#edit()","competitionscontroller#edit()","customerscontroller#edit()","groupingscontroller#edit()","regularcontestscontroller#edit()","teamscontroller#edit()","validdatescontroller#edit()","venuescontroller#edit()","bracketcontestant#fullname()","competition#fullname()","contestant#fullname()","grouping#fullname()","customerscontroller#greet()","displaycontroller#grouping()","contest#has_score?()","grouping#has_subgroupings?()","grouping#has_teams?()","grouping#hierarchy()","contest#home_team_id()","contest#homecontestant_fullname()","bracketcontestscontroller#index()","bracketscontroller#index()","competitionscontroller#index()","displaycontroller#index()","groupingscontroller#index()","regularcontestscontroller#index()","resultscontroller#index()","teamscontroller#index()","validdatescontroller#index()","venuescontroller#index()","welcomecontroller#index()","applicationhelper#instructions()","admincontroller#login()","customerscontroller#login()","resultscontroller#login()","customerscontroller#logout()","resultscontroller#logout()","contestant#loss()","team#losses()","applicationhelper#navpanel()","applicationhelper#nav_panel()","admincontroller#nav_link_array()","applicationcontroller#nav_link_array()","customerscontroller#nav_link_array()","displaycontroller#nav_link_array()","resultscontroller#nav_link_array()","welcomecontroller#nav_link_array()","bracketcontestscontroller#nav_link_hash()","displaycontroller#nav_link_to_grouping()","applicationcontroller#navitem()","contest#needs_score?()","groupingshelper#nested_groupings()","bracketcontestscontroller#new()","competitionscontroller#new()","contest::new()","customerscontroller#new()","groupingscontroller#new()","navitem::new()","regularcontestscontroller#new()","resultsrecord::new()","teamscontroller#new()","validdatescontroller#new()","venuescontroller#new()","customerscontroller#new_competition()","contestant#opponent()","customer#password()","customer#password=()","team#pct()","competition::playoffbracketlabels()","team#points()","competition::poolgroupseasonlabels()","bracketcontestant#priorcontest()","bracketcontest#record_result()","contest#record_result()","resultscontroller#report()","resultscontroller#rescord()","competition#result_headings()","team#result_row()","regularcontestscontroller#roundrobin()","regularcontestscontroller#rrobin()","resultscontroller#scorect()","applicationcontroller#scorer_link_array()","bracketcontestscontroller#set_bracket()","nestedcontroller#set_competition()","bracketcontestscontroller#show()","bracketscontroller#show()","competitionscontroller#show()","groupingscontroller#show()","regularcontestscontroller#show()","teamscontroller#show()","validdatescontroller#show()","venuescontroller#show()","contest::statuses()","grouping#subgroupings()","displaycontroller#team()","contestant#teamname()","grouping#teams()","contest::times()","grouping::top_grouping()","bracketcontestscontroller#update()","competitionscontroller#update()","customerscontroller#update()","groupingscontroller#update()","regularcontestscontroller#update()","teamscontroller#update()","validdatescontroller#update()","venuescontroller#update()","contest#venue_name()","contestant#win()","team#wins()",""],"info":[["AdminController","","AdminController.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","","<p>The methods in this Module are used by most or all views in the\napplication. Navigation is handled in …\n"],["Bracket","","Bracket.html","","<p>This class defines a Bracket for the purpose of collecting Bracketcontests.\nA Bracket is a Grouping that …\n"],["Bracketcontest","","Bracketcontest.html","","<p>Bracketcontest adds functionality related to the contestants. Contestants\nmay be winners/losers of prior …\n"],["Bracketcontestant","","Bracketcontestant.html","","<p>A Bracketcontestant will eventually be a Team. However, before a specific\nTeam is identified as being …\n"],["BracketcontestsController","","BracketcontestsController.html","",""],["BracketcontestsHelper","","BracketcontestsHelper.html","",""],["BracketsController","","BracketsController.html","","<p>This controller displays the available Bracket Groupings and allows the\nuser to select one for updating …\n"],["BracketsHelper","","BracketsHelper.html","",""],["Competition","","Competition.html","","<p>This class contains the essentials for a Competition.  All other\nnon-Customer resources are nested within …\n"],["CompetitionsController","","CompetitionsController.html","","<p>A Competition is created from the Customerscontroller.\n"],["CompetitionsHelper","","CompetitionsHelper.html","",""],["Contest","","Contest.html","","<p>This is the base class which contains the single table for all inherited\nContest classes (Regularcontest, …\n"],["Contestant","","Contestant.html","",""],["Customer","","Customer.html","",""],["CustomersController","","CustomersController.html","","<p>In the routes file, Customer is a Singular Resource. A Customer establishes\na Session via a login page/action. …\n"],["CustomersHelper","","CustomersHelper.html","",""],["DisplayController","","DisplayController.html","",""],["DisplayHelper","","DisplayHelper.html","",""],["Grouping","","Grouping.html","","<p>This class defines collections of Teams for the purpose of Standings and/or\nPlayoffs, as well as limiting …\n"],["GroupingsController","","GroupingsController.html","",""],["GroupingsHelper","","GroupingsHelper.html","",""],["NavItem","","NavItem.html","","<p>This is a holder of values which define a Navigation Link Item.\n"],["NestedController","","NestedController.html","",""],["Nestedmodel","","Nestedmodel.html","",""],["Regularcontest","","Regularcontest.html","","<p>Regularcontest is a faily simple class which adds little to the basic\nContest class.\n"],["Regularcontestant","","Regularcontestant.html","",""],["RegularcontestsController","","RegularcontestsController.html","",""],["RegularcontestsHelper","","RegularcontestsHelper.html","",""],["ResultsController","","ResultsController.html","",""],["ResultsHelper","","ResultsHelper.html","",""],["ResultsRecord","","ResultsRecord.html","",""],["Team","","Team.html","",""],["TeamsController","","TeamsController.html","",""],["TeamsHelper","","TeamsHelper.html","",""],["Validdate","","Validdate.html","",""],["ValiddatesController","","ValiddatesController.html","",""],["ValiddatesHelper","","ValiddatesHelper.html","",""],["Venue","","Venue.html","",""],["VenuesController","","VenuesController.html","",""],["VenuesHelper","","VenuesHelper.html","",""],["WelcomeController","","WelcomeController.html","",""],["WelcomeHelper","","WelcomeHelper.html","",""],["admin_link_array","ApplicationController","ApplicationController.html#method-i-admin_link_array","()","<p>Link array for admins, who have access to everything related to the\napplication for a Competition.\n"],["advance_contestants","Bracketcontest","Bracketcontest.html#method-i-advance_contestants","()","<p>Advance teams if this Bracketcontest is referred to by the contestants of a\nsubsequent Bracketcontest …\n"],["all","Bracket","Bracket.html#method-c-all","()",""],["all_participant_codes","Bracket","Bracket.html#method-i-all_participant_codes","()",""],["all_subgroupings","Grouping","Grouping.html#method-i-all_subgroupings","()","<p>Groupings directly within this Grouping plus Groupings within any\ndescendants of this Grouping.\n"],["all_teams","Grouping","Grouping.html#method-i-all_teams","()","<p>Teams directly within this Grouping plus Teams within any descendants of\nthis Grouping. Ordinarily there …\n"],["as_contestants","Team","Team.html#method-i-as_contestants","()","<p>Return an Array of all Contestants for which this is the Team.\n"],["authenticate","Customer","Customer.html#method-c-authenticate","(userid, password)",""],["away_team_id","Contest","Contest.html#method-i-away_team_id","()","<p>Team ID of Away Contestant, if any\n"],["awaycontestant_fullname","Contest","Contest.html#method-i-awaycontestant_fullname","()","<p>Full name can be customized for different contestant types.\n"],["cancel","RegularcontestsController","RegularcontestsController.html#method-i-cancel","()","<p>PATCH/PUT /regularcontests/cancel/1 PATCH/PUT\n/regularcontests/cancel/1.json\n"],["change_password","CustomersController","CustomersController.html#method-i-change_password","()","<p>GET /customer/change_password\n"],["choose_competition","DisplayController","DisplayController.html#method-i-choose_competition","()",""],["choose_customer","DisplayController","DisplayController.html#method-i-choose_customer","()",""],["contest","Contestant","Contestant.html#method-i-contest","()","<p>Returns instance of a descendant of Contest class. This contestant is one\nof the two contestants for …\n"],["contestant_class","Contest","Contest.html#method-i-contestant_class","()","<p>Attach the letters &#39;ant&#39; to the end of the class name of this\nContest subclass object to determine …\n"],["contestantlabel","Bracketcontestant","Bracketcontestant.html#method-i-contestantlabel","()","<p>Human-readable version of coded Contestant.\n"],["contestanttype","Bracketcontestant","Bracketcontestant.html#method-i-contestanttype","()","<p>Override with additional information.\n"],["create","BracketcontestsController","BracketcontestsController.html#method-i-create","()","<p>POST /bracketcontests POST /bracketcontests.json\n"],["create","CompetitionsController","CompetitionsController.html#method-i-create","()","<p>POST /competitions POST /competitions.json\n"],["create","CustomersController","CustomersController.html#method-i-create","()","<p>POST /customers POST /customers.json\n"],["create","GroupingsController","GroupingsController.html#method-i-create","()","<p>POST /groupings POST /groupings.json\n"],["create","RegularcontestsController","RegularcontestsController.html#method-i-create","()","<p>POST /regularcontests POST /regularcontests.json\n"],["create","TeamsController","TeamsController.html#method-i-create","()","<p>POST /teams POST /teams.json\n"],["create","ValiddatesController","ValiddatesController.html#method-i-create","()","<p>POST /validdates POST /validdates.json\n"],["create","VenuesController","VenuesController.html#method-i-create","()","<p>POST /venues POST /venues.json\n"],["default_bracket","Bracketcontest","Bracketcontest.html#method-c-default_bracket","(bracket_id)","<p>Provide controlled public access to private class method.\n"],["default_comp","Contest","Contest.html#method-c-default_comp","(comp_id)",""],["default_comp","Contestant","Contestant.html#method-c-default_comp","(comp_id)",""],["default_comp","Grouping","Grouping.html#method-c-default_comp","(comp_id)",""],["default_comp","Nestedmodel","Nestedmodel.html#method-c-default_comp","(comp_id)",""],["default_comp","Team","Team.html#method-c-default_comp","(comp_id)","<p>Since default_scope is private, we use this to allow access.\n"],["default_comp","Validdate","Validdate.html#method-c-default_comp","(comp_id)",""],["default_comp","Venue","Venue.html#method-c-default_comp","(comp_id)",""],["default_cust","Competition","Competition.html#method-c-default_cust","(cust_id)","<p>Note that since this is not a subclass of NestedModel, we must write our\nown public method to access …\n"],["destroy","BracketcontestsController","BracketcontestsController.html#method-i-destroy","()","<p>DELETE /bracketcontests/1 DELETE /bracketcontests/1.json\n"],["destroy","CompetitionsController","CompetitionsController.html#method-i-destroy","()","<p>DELETE /competitions/1 DELETE /competitions/1.json\n"],["destroy","GroupingsController","GroupingsController.html#method-i-destroy","()","<p>DELETE /groupings/1 DELETE /groupings/1.json\n"],["destroy","RegularcontestsController","RegularcontestsController.html#method-i-destroy","()","<p>DELETE /regularcontests/1 DELETE /regularcontests/1.json\n"],["destroy","TeamsController","TeamsController.html#method-i-destroy","()","<p>DELETE /teams/1 DELETE /teams/1.json\n"],["destroy","ValiddatesController","ValiddatesController.html#method-i-destroy","()","<p>DELETE /validdates/1 DELETE /validdates/1.json\n"],["destroy","VenuesController","VenuesController.html#method-i-destroy","()","<p>DELETE /venues/1 DELETE /venues/1.json\n"],["display_date","Contest","Contest.html#method-i-display_date","()","<p>Convenience method. Display “TBD” for nil.\n"],["display_link_array","ApplicationController","ApplicationController.html#method-i-display_link_array","()","<p>Link array for the public display portion of this application. The Display\nController should override …\n"],["display_time","Contest","Contest.html#method-i-display_time","()","<p>Convenience method. Display “TBD” for nil.\n"],["draw","Contestant","Contestant.html#method-i-draw","()","<p>Draws (when used) are when the scores are equal.\n"],["draws","Team","Team.html#method-i-draws","()","<p>Return count of all Contestants for which this is the Team and this score\nis equal to the opponent&#39;s …\n"],["dump","BracketcontestsController","BracketcontestsController.html#method-i-dump","()","<p>GET /regularcontests GET /regularcontests.json\n"],["dump","RegularcontestsController","RegularcontestsController.html#method-i-dump","()","<p>GET /regularcontests GET /regularcontests.json\n"],["edit","BracketcontestsController","BracketcontestsController.html#method-i-edit","()","<p>GET /bracketcontests/1/edit\n"],["edit","CompetitionsController","CompetitionsController.html#method-i-edit","()","<p>GET /competitions/1/edit\n"],["edit","CustomersController","CustomersController.html#method-i-edit","()","<p>GET /customer/edit\n"],["edit","GroupingsController","GroupingsController.html#method-i-edit","()","<p>GET /groupings/1/edit\n"],["edit","RegularcontestsController","RegularcontestsController.html#method-i-edit","()","<p>GET /regularcontests/1/edit\n"],["edit","TeamsController","TeamsController.html#method-i-edit","()","<p>GET /teams/1/edit\n"],["edit","ValiddatesController","ValiddatesController.html#method-i-edit","()","<p>GET /validdates/1/edit\n"],["edit","VenuesController","VenuesController.html#method-i-edit","()","<p>GET /venues/1/edit\n"],["fullname","Bracketcontestant","Bracketcontestant.html#method-i-fullname","()","<p>Override with additional information.\n"],["fullname","Competition","Competition.html#method-i-fullname","()","<p>Name, Sport, and Variety of Competition, suitable for a title or heading.\n"],["fullname","Contestant","Contestant.html#method-i-fullname","()",""],["fullname","Grouping","Grouping.html#method-i-fullname","()","<p>Concatenated names from very top down to this Grouping.\n"],["greet","CustomersController","CustomersController.html#method-i-greet","()","<p>GET /customers/1 GET /customers/1.json\n"],["grouping","DisplayController","DisplayController.html#method-i-grouping","()",""],["has_score?","Contest","Contest.html#method-i-has_score-3F","()","<p>True if either Team has a score.\n"],["has_subgroupings?","Grouping","Grouping.html#method-i-has_subgroupings-3F","()","<p>Return true iff there exists at least one Grouping that identifies this as\nits Parent.\n"],["has_teams?","Grouping","Grouping.html#method-i-has_teams-3F","()","<p>Return true iff there exists at least one Team that identifies this as its\nGrouping.\n"],["hierarchy","Grouping","Grouping.html#method-i-hierarchy","()","<p>(Recursive) Return an Array with this Grouping appended to the end of the\nArray returned by sending this …\n"],["home_team_id","Contest","Contest.html#method-i-home_team_id","()","<p>Team ID of Home Contestant, if any\n"],["homecontestant_fullname","Contest","Contest.html#method-i-homecontestant_fullname","()","<p>Full name can be customized for different contestant types.\n"],["index","BracketcontestsController","BracketcontestsController.html#method-i-index","()","<p>GET /bracketcontests GET /bracketcontests.json\n"],["index","BracketsController","BracketsController.html#method-i-index","()","<p>GET /brackets GET /brackets.json\n"],["index","CompetitionsController","CompetitionsController.html#method-i-index","()","<p>GET /competitions GET /competitions.json\n"],["index","DisplayController","DisplayController.html#method-i-index","()",""],["index","GroupingsController","GroupingsController.html#method-i-index","()","<p>GET /groupings GET /groupings.json\n"],["index","RegularcontestsController","RegularcontestsController.html#method-i-index","()","<p>GET /regularcontests GET /regularcontests.json\n"],["index","ResultsController","ResultsController.html#method-i-index","()",""],["index","TeamsController","TeamsController.html#method-i-index","()","<p>GET /teams GET /teams.json\n"],["index","ValiddatesController","ValiddatesController.html#method-i-index","()","<p>GET /validdates GET /validdates.json\n"],["index","VenuesController","VenuesController.html#method-i-index","()","<p>GET /venues GET /venues.json\n"],["index","WelcomeController","WelcomeController.html#method-i-index","()",""],["instructions","ApplicationHelper","ApplicationHelper.html#method-i-instructions","()",""],["login","AdminController","AdminController.html#method-i-login","()",""],["login","CustomersController","CustomersController.html#method-i-login","()","<p>GET /customer/login GET /customers.json ??\n"],["login","ResultsController","ResultsController.html#method-i-login","()","<p>GET /customer/login GET /customers.json ??\n"],["logout","CustomersController","CustomersController.html#method-i-logout","()","<p>GET /customer/logout GET /customers.json ??\n"],["logout","ResultsController","ResultsController.html#method-i-logout","()","<p>GET /customer/logout GET /customers.json ??\n"],["loss","Contestant","Contestant.html#method-i-loss","()","<p>But a Loss is a whole other thing…\n"],["losses","Team","Team.html#method-i-losses","()","<p>Return count of all Contestants for which this is the Team and this score\nis less than the opponent&#39;s …\n"],["navPanel","ApplicationHelper","ApplicationHelper.html#method-i-navPanel","()","<p>Start the process to produce a (nested) Unordered List of Links for\nNavigation.\n"],["nav_Panel","ApplicationHelper","ApplicationHelper.html#method-i-nav_Panel","(nav_level, link_array )","<p>Produce an Unordered List of Links for Navigation. This may be called\nrecursively.\n\n<pre>* ul_opts = HTML options ...</pre>\n"],["nav_link_array","AdminController","AdminController.html#method-i-nav_link_array","()",""],["nav_link_array","ApplicationController","ApplicationController.html#method-i-nav_link_array","()","<p>Default link array. Should be overridden by controllers for this\napplication.\n"],["nav_link_array","CustomersController","CustomersController.html#method-i-nav_link_array","()","<p>Link Array.\n"],["nav_link_array","DisplayController","DisplayController.html#method-i-nav_link_array","()","<p>Array of Grouping links can have nested Arrays of Grouping links, but it\nall starts at the top. No navigation …\n"],["nav_link_array","ResultsController","ResultsController.html#method-i-nav_link_array","()","<p>before_action :set_competition_from_session, except: [:login]\n"],["nav_link_array","WelcomeController","WelcomeController.html#method-i-nav_link_array","()",""],["nav_link_hash","BracketcontestsController","BracketcontestsController.html#method-i-nav_link_hash","()",""],["nav_link_to_grouping","DisplayController","DisplayController.html#method-i-nav_link_to_grouping","(grp)","<p>(Recursive) The navigation link to this grouping is followed by an Array of\nnavigation links to each …\n"],["navitem","ApplicationController","ApplicationController.html#method-i-navitem","(href, text, options={})",""],["needs_score?","Contest","Contest.html#method-i-needs_score-3F","()","<p>True if neither Team has a score.\n"],["nested_groupings","GroupingsHelper","GroupingsHelper.html#method-i-nested_groupings","(grp_level, grouping)","<p>Produce an Unordered List of Links for Navigation. This may be called\nrecursively.\n\n<pre>* ul_opts = HTML options ...</pre>\n"],["new","BracketcontestsController","BracketcontestsController.html#method-i-new","()","<p>GET /bracketcontests/new\n"],["new","CompetitionsController","CompetitionsController.html#method-i-new","()","<p>GET /competitions/new\n"],["new","Contest","Contest.html#method-c-new","(attributes = nil, options = {})","<p>Each Contest (and all subclasses) must have two Contestants. We initialize\neach Contest with two shell …\n"],["new","CustomersController","CustomersController.html#method-i-new","()","<p>GET /customers/new\n"],["new","GroupingsController","GroupingsController.html#method-i-new","()","<p>GET /groupings/new\n"],["new","NavItem","NavItem.html#method-c-new","(href, text, options={class: \"nav\", target: nil})",""],["new","RegularcontestsController","RegularcontestsController.html#method-i-new","()","<p>GET /regularcontests/new\n"],["new","ResultsRecord","ResultsRecord.html#method-c-new","()",""],["new","TeamsController","TeamsController.html#method-i-new","()","<p>GET /teams/new\n"],["new","ValiddatesController","ValiddatesController.html#method-i-new","()","<p>GET /validdates/new\n"],["new","VenuesController","VenuesController.html#method-i-new","()","<p>GET /venues/new\n"],["new_competition","CustomersController","CustomersController.html#method-i-new_competition","()","<p>GET /customer/new_competition\n"],["opponent","Contestant","Contestant.html#method-i-opponent","()","<p>Returns instance of a descendant of Contestant class that is the other\ncontestant in the Contest with …\n"],["password","Customer","Customer.html#method-i-password","()",""],["password=","Customer","Customer.html#method-i-password-3D","(pwd)",""],["pct","Team","Team.html#method-i-pct","()",""],["playoffbracketlabels","Competition","Competition.html#method-c-playoffbracketlabels","()",""],["points","Team","Team.html#method-i-points","()","<p>Used for soccer results.\n"],["poolgroupseasonlabels","Competition","Competition.html#method-c-poolgroupseasonlabels","()",""],["priorcontest","Bracketcontestant","Bracketcontestant.html#method-i-priorcontest","()","<p>Prior Bracketcontest referred to by this Contestant.\n"],["record_result","Bracketcontest","Bracketcontest.html#method-i-record_result","(homescore, awayscore, status=\"COMPLETED\")","<p>Assign score to each Bracketcontestant and status to entire Bracketcontest.\nSave all three records in …\n"],["record_result","Contest","Contest.html#method-i-record_result","(homescore, awayscore, status=\"COMPLETED\")","<p>Assign score to each Contestant and status to entire Contest. Save all\nthree records in a single transaction. …\n"],["report","ResultsController","ResultsController.html#method-i-report","()",""],["rescord","ResultsController","ResultsController.html#method-i-rescord","()",""],["result_headings","Competition","Competition.html#method-i-result_headings","()","<p>Display table headings for Standings for a Grouping or for a Team&#39;s\nrecord.\n"],["result_row","Team","Team.html#method-i-result_row","(competition)","<p>Varies by sport\n"],["roundrobin","RegularcontestsController","RegularcontestsController.html#method-i-roundrobin","()","<p>POST/regularcontests/roundrobin POST /regularcontests/roundrobin.json\n"],["rrobin","RegularcontestsController","RegularcontestsController.html#method-i-rrobin","()","<p>GET/regularcontests/rrobin GET /regularcontests/rrobin.json\n"],["scorect","ResultsController","ResultsController.html#method-i-scorect","()",""],["scorer_link_array","ApplicationController","ApplicationController.html#method-i-scorer_link_array","()","<p>Link array for scorers, who can also open up the public display portion of\nthis application in a separate …\n"],["set_bracket","BracketcontestsController","BracketcontestsController.html#method-i-set_bracket","()",""],["set_competition","NestedController","NestedController.html#method-i-set_competition","()",""],["show","BracketcontestsController","BracketcontestsController.html#method-i-show","()","<p>GET /bracketcontests/1 GET /bracketcontests/1.json\n"],["show","BracketsController","BracketsController.html#method-i-show","()","<p>GET /brackets/1 GET /brackets/1.json\n"],["show","CompetitionsController","CompetitionsController.html#method-i-show","()","<p>GET /competitions/1 GET /competitions/1.json\n"],["show","GroupingsController","GroupingsController.html#method-i-show","()","<p>GET /groupings/1 GET /groupings/1.json\n"],["show","RegularcontestsController","RegularcontestsController.html#method-i-show","()","<p>GET /regularcontests/1 GET /regularcontests/1.json\n"],["show","TeamsController","TeamsController.html#method-i-show","()","<p>GET /teams/1 GET /teams/1.json\n"],["show","ValiddatesController","ValiddatesController.html#method-i-show","()","<p>GET /validdates/1 GET /validdates/1.json\n"],["show","VenuesController","VenuesController.html#method-i-show","()","<p>GET /venues/1 GET /venues/1.json\n"],["statuses","Contest","Contest.html#method-c-statuses","()","<p>Create a collection of contest statuses. This will be used to display\nselection choices and for validation. …\n"],["subgroupings","Grouping","Grouping.html#method-i-subgroupings","()","<p>Return the Collection of Groupings that identify this as their Parent.\n"],["team","DisplayController","DisplayController.html#method-i-team","()",""],["teamname","Contestant","Contestant.html#method-i-teamname","()",""],["teams","Grouping","Grouping.html#method-i-teams","()","<p>Return the Collection of Teams that identify this as their Grouping.\n"],["times","Contest","Contest.html#method-c-times","()","<p>Create a collection of times throughout the day in five minute increments.\nThis will be used to display …\n"],["top_grouping","Grouping","Grouping.html#method-c-top_grouping","()","<p>sending this method to the parent of this Grouping.\n"],["update","BracketcontestsController","BracketcontestsController.html#method-i-update","()","<p>PATCH/PUT /bracketcontests/1 PATCH/PUT /bracketcontests/1.json\n"],["update","CompetitionsController","CompetitionsController.html#method-i-update","()","<p>PATCH/PUT /competitions/1 PATCH/PUT /competitions/1.json\n"],["update","CustomersController","CustomersController.html#method-i-update","()","<p>PATCH/PUT /customers/1 PATCH/PUT /customers/1.json\n"],["update","GroupingsController","GroupingsController.html#method-i-update","()","<p>PATCH/PUT /groupings/1 PATCH/PUT /groupings/1.json\n"],["update","RegularcontestsController","RegularcontestsController.html#method-i-update","()","<p>PATCH/PUT /regularcontests/1 PATCH/PUT /regularcontests/1.json\n"],["update","TeamsController","TeamsController.html#method-i-update","()","<p>PATCH/PUT /teams/1 PATCH/PUT /teams/1.json\n"],["update","ValiddatesController","ValiddatesController.html#method-i-update","()","<p>PATCH/PUT /validdates/1 PATCH/PUT /validdates/1.json\n"],["update","VenuesController","VenuesController.html#method-i-update","()","<p>PATCH/PUT /venues/1 PATCH/PUT /venues/1.json\n"],["venue_name","Contest","Contest.html#method-i-venue_name","()","<p>Convenience method. Display “TBD” for nil.\n"],["win","Contestant","Contestant.html#method-i-win","()","<p>A Win is a Win…\n"],["wins","Team","Team.html#method-i-wins","()","<p>Return count of all Contestants for which this is the Team and this score\nis more than the opponent&#39;s …\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}