var search_data = {"index":{"searchIndex":["admincontroller","applicationcontroller","applicationhelper","array","bracket","bracketcontest","bracketcontestant","bracketcontestscontroller","bracketcontestshelper","bracketgrouping","bracketgroupingscontroller","bracketpairing","bracketshelper","competition","competitionscontroller","competitionshelper","contest","contestant","customer","customersessionscontroller","customersessionshelper","customerscontroller","customershelper","displaycontroller","displayhelper","grouping","groupingscontroller","groupingshelper","manager","managersessionscontroller","managersessionshelper","managerscontroller","navitem","nestedcontroller","nestedmodel","object","rails","myrspecgenerator","regularcontest","regularcontestant","regularcontestscontroller","regularcontestshelper","resultsrecord","scorer","scorersessionscontroller","scorersessionshelper","scorerscontroller","scorershelper","team","teamscontroller","teamshelper","tournament","validdate","validdatescontroller","validdateshelper","venue","venuescontroller","venueshelper","welcomecontroller","welcomehelper","<=>()","advance_contestants()","all()","all_from()","all_participant_codes()","all_subgroupings()","all_teams()","as_bracket()","as_contestants()","assign_seeding_and_ccode()","authenticate()","authenticate()","authenticate()","authenticate_manager()","away_team_id()","awaycontestant_fullname()","bottom_half()","cancel()","change_manager_password()","change_password()","change_scorer_password()","choose_competition()","choose_customer()","choose_customer()","clear_manager_password()","clear_manager_password()","clear_scorer_password()","clear_scorer_password()","complete()","complete_se_matchups()","contestant_class()","contestantlabel()","contestanttype()","contests()","contests()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_competition()","create_new_salt()","create_root_grouping()","default_bracketgrouping()","default_comp()","default_comp()","default_comp()","default_comp()","default_comp()","default_comp()","default_comp()","default_cust()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","display_date()","display_link_array()","display_time()","draw()","draws()","dump()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","encrypted_password()","failure_redirect()","for_pair()","fullname()","fullname()","fullname()","fullname()","game_number()","greet()","greet()","grouping()","half_size()","has_score?()","has_subgroupings?()","has_teams?()","hierarchy()","home_team_id()","homecontestant_fullname()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","instructions()","login()","logout()","logout()","logout()","logout()","loser_code()","loss()","losses()","manager_id()","manager_link_array()","manager_password()","manager_password=()","navpanel()","nav_panel()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_array()","nav_link_hash()","nav_link_to_grouping()","navitem()","nbyes()","needs_no_authentication()","needs_no_authentication()","needs_score?()","nested_groupings()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_competition()","nplayers()","nrounds()","opponent()","password()","password=()","passwords()","pct()","playoffbracketlabels()","points()","poolgroupseasonlabels()","priorcontest()","record_result()","record_result()","report()","result_headings()","result_row()","roundrobin()","roundrobin2()","rrobin()","save()","save_all!()","scorer_id()","scorer_link_array()","scorer_password()","scorer_password=()","se_matchups()","se_matchups()","seed()","set_bracketgrouping()","set_competition()","show()","show()","show()","show()","show()","show()","show()","show()","statuses()","subgroupings()","team()","teamname()","times()","top_grouping()","top_half()","update()","update()","update()","update()","update()","update()","update()","update()","update_password()","venue_name()","win()","winner_code()","wins()","readme"],"longSearchIndex":["admincontroller","applicationcontroller","applicationhelper","array","bracket","bracketcontest","bracketcontestant","bracketcontestscontroller","bracketcontestshelper","bracketgrouping","bracketgroupingscontroller","bracketpairing","bracketshelper","competition","competitionscontroller","competitionshelper","contest","contestant","customer","customersessionscontroller","customersessionshelper","customerscontroller","customershelper","displaycontroller","displayhelper","grouping","groupingscontroller","groupingshelper","manager","managersessionscontroller","managersessionshelper","managerscontroller","navitem","nestedcontroller","nestedmodel","object","rails","rails::myrspecgenerator","regularcontest","regularcontestant","regularcontestscontroller","regularcontestshelper","resultsrecord","scorer","scorersessionscontroller","scorersessionshelper","scorerscontroller","scorershelper","team","teamscontroller","teamshelper","tournament","validdate","validdatescontroller","validdateshelper","venue","venuescontroller","venueshelper","welcomecontroller","welcomehelper","contest#<=>()","bracketcontest#advance_contestants()","bracketgrouping::all()","bracket::all_from()","bracketgrouping#all_participant_codes()","grouping#all_subgroupings()","grouping#all_teams()","grouping#as_bracket()","team#as_contestants()","bracketgrouping#assign_seeding_and_ccode()","customer::authenticate()","manager::authenticate()","scorer::authenticate()","competition::authenticate_manager()","contest#away_team_id()","contest#awaycontestant_fullname()","array#bottom_half()","regularcontestscontroller#cancel()","managerscontroller#change_manager_password()","customerscontroller#change_password()","managerscontroller#change_scorer_password()","nestedcontroller#choose_competition()","managerscontroller#choose_customer()","nestedcontroller#choose_customer()","competition#clear_manager_password()","managerscontroller#clear_manager_password()","competition#clear_scorer_password()","managerscontroller#clear_scorer_password()","bracketgroupingscontroller#complete()","bracketgrouping#complete_se_matchups()","contest#contestant_class()","bracketcontestant#contestantlabel()","bracketcontestant#contestanttype()","grouping#contests()","team#contests()","bracketcontestscontroller#create()","competitionscontroller#create()","customersessionscontroller#create()","customerscontroller#create()","groupingscontroller#create()","managersessionscontroller#create()","regularcontestscontroller#create()","scorersessionscontroller#create()","teamscontroller#create()","validdatescontroller#create()","venuescontroller#create()","customerscontroller#create_competition()","competition#create_new_salt()","competition#create_root_grouping()","bracketcontest::default_bracketgrouping()","contest::default_comp()","contestant::default_comp()","grouping::default_comp()","nestedmodel::default_comp()","team::default_comp()","validdate::default_comp()","venue::default_comp()","competition::default_cust()","competitionscontroller#destroy()","groupingscontroller#destroy()","regularcontestscontroller#destroy()","teamscontroller#destroy()","validdatescontroller#destroy()","venuescontroller#destroy()","contest#display_date()","applicationcontroller#display_link_array()","contest#display_time()","contestant#draw()","team#draws()","regularcontestscontroller#dump()","bracketcontestscontroller#edit()","competitionscontroller#edit()","customerscontroller#edit()","groupingscontroller#edit()","regularcontestscontroller#edit()","teamscontroller#edit()","validdatescontroller#edit()","venuescontroller#edit()","competition::encrypted_password()","nestedcontroller#failure_redirect()","bracketgrouping#for_pair()","bracketcontestant#fullname()","competition#fullname()","contestant#fullname()","grouping#fullname()","bracketgrouping#game_number()","customerscontroller#greet()","managerscontroller#greet()","displaycontroller#grouping()","array#half_size()","contest#has_score?()","grouping#has_subgroupings?()","grouping#has_teams?()","grouping#hierarchy()","contest#home_team_id()","contest#homecontestant_fullname()","bracketgroupingscontroller#index()","competitionscontroller#index()","displaycontroller#index()","groupingscontroller#index()","regularcontestscontroller#index()","scorerscontroller#index()","teamscontroller#index()","validdatescontroller#index()","venuescontroller#index()","welcomecontroller#index()","applicationhelper#instructions()","admincontroller#login()","customersessionscontroller#logout()","customerscontroller#logout()","managersessionscontroller#logout()","scorersessionscontroller#logout()","bracketcontest#loser_code()","contestant#loss()","team#losses()","manager#manager_id()","applicationcontroller#manager_link_array()","competition#manager_password()","competition#manager_password=()","applicationhelper#navpanel()","applicationhelper#nav_panel()","admincontroller#nav_link_array()","applicationcontroller#nav_link_array()","customersessionscontroller#nav_link_array()","customerscontroller#nav_link_array()","displaycontroller#nav_link_array()","managersessionscontroller#nav_link_array()","managerscontroller#nav_link_array()","scorerscontroller#nav_link_array()","welcomecontroller#nav_link_array()","bracketcontestscontroller#nav_link_hash()","displaycontroller#nav_link_to_grouping()","applicationcontroller#navitem()","tournament#nbyes()","manager::needs_no_authentication()","scorer::needs_no_authentication()","contest#needs_score?()","groupingshelper#nested_groupings()","bracketcontestscontroller#new()","competitionscontroller#new()","contest::new()","customersessionscontroller#new()","customerscontroller#new()","groupingscontroller#new()","managersessionscontroller#new()","navitem::new()","regularcontestscontroller#new()","resultsrecord::new()","scorersessionscontroller#new()","teamscontroller#new()","tournament::new()","validdatescontroller#new()","venuescontroller#new()","customerscontroller#new_competition()","tournament#nplayers()","tournament#nrounds()","contestant#opponent()","customer#password()","customer#password=()","managerscontroller#passwords()","team#pct()","competition::playoffbracketlabels()","team#points()","competition::poolgroupseasonlabels()","bracketcontestant#priorcontest()","bracketcontest#record_result()","contest#record_result()","scorerscontroller#report()","competition#result_headings()","team#result_row()","regularcontestscontroller#roundrobin()","regularcontestscontroller#roundrobin2()","regularcontestscontroller#rrobin()","competition#save()","contest#save_all!()","scorer#scorer_id()","applicationcontroller#scorer_link_array()","competition#scorer_password()","competition#scorer_password=()","bracketgrouping#se_matchups()","object#se_matchups()","tournament#seed()","bracketcontestscontroller#set_bracketgrouping()","nestedcontroller#set_competition()","bracketcontestscontroller#show()","bracketgroupingscontroller#show()","competitionscontroller#show()","groupingscontroller#show()","regularcontestscontroller#show()","teamscontroller#show()","validdatescontroller#show()","venuescontroller#show()","contest::statuses()","grouping#subgroupings()","displaycontroller#team()","contestant#teamname()","contest::times()","grouping::top_grouping()","array#top_half()","bracketcontestscontroller#update()","competitionscontroller#update()","customerscontroller#update()","groupingscontroller#update()","regularcontestscontroller#update()","teamscontroller#update()","validdatescontroller#update()","venuescontroller#update()","customerscontroller#update_password()","contest#venue_name()","contestant#win()","bracketcontest#winner_code()","team#wins()",""],"info":[["AdminController","","AdminController.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","","<p>The methods in this Module are used by most or all views in the\napplication. Navigation is handled in …\n"],["Array","","Array.html","",""],["Bracket","","Bracket.html","",""],["Bracketcontest","","Bracketcontest.html","","<p>Bracketcontest adds functionality related to the contestants. Contestants\nmay be winners/losers of prior …\n"],["Bracketcontestant","","Bracketcontestant.html","","<p>A Bracketcontestant will eventually be a Team. However, before a specific\nTeam is identified as being …\n"],["BracketcontestsController","","BracketcontestsController.html","",""],["BracketcontestsHelper","","BracketcontestsHelper.html","",""],["Bracketgrouping","","Bracketgrouping.html","","<p>This class defines a Bracketgrouping for the purpose of collecting\nBracketcontests. A Bracketgrouping …\n"],["BracketgroupingsController","","BracketgroupingsController.html","","<p>This controller displays the available Bracketgroupings and allows the user\nto select one for updating …\n"],["Bracketpairing","","Bracketpairing.html","",""],["BracketsHelper","","BracketsHelper.html","",""],["Competition","","Competition.html","","<p>This class contains the essentials for a Competition\n"],["CompetitionsController","","CompetitionsController.html","","<p>A Competition is created from the Customerscontroller.\n"],["CompetitionsHelper","","CompetitionsHelper.html","",""],["Contest","","Contest.html","","<p>This is the base class which contains the single table for all inherited\nContest classes (Regularcontest, …\n"],["Contestant","","Contestant.html","",""],["Customer","","Customer.html","",""],["CustomerSessionsController","","CustomerSessionsController.html","",""],["CustomerSessionsHelper","","CustomerSessionsHelper.html","",""],["CustomersController","","CustomersController.html","","<p>In the routes file, Customer is a Singular Resource. A Customer establishes\na Session via a login page/action. …\n"],["CustomersHelper","","CustomersHelper.html","",""],["DisplayController","","DisplayController.html","",""],["DisplayHelper","","DisplayHelper.html","",""],["Grouping","","Grouping.html","","<p>This class defines collections of Teams for the purpose of Standings and/or\nPlayoffs, as well as limiting …\n"],["GroupingsController","","GroupingsController.html","",""],["GroupingsHelper","","GroupingsHelper.html","",""],["Manager","","Manager.html","","\n<pre class=\"ruby\"><span class=\"ruby-constant\">This</span> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-identifier\">defines</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-constant\">Manager</span> <span class=\"ruby-keyword\">for</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">purpose</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">controlling</span> <span class=\"ruby-identifier\">access</span> <span class=\"ruby-identifier\">to</span>\n</pre>\n<p>the functions for Managing a Competition …\n"],["ManagerSessionsController","","ManagerSessionsController.html","",""],["ManagerSessionsHelper","","ManagerSessionsHelper.html","",""],["ManagersController","","ManagersController.html","","<p>Manager controller classes inherit from this class.\n"],["NavItem","","NavItem.html","","<p>This is a holder of values which define a Navigation Link Item.\n"],["NestedController","","NestedController.html","","<p>Controllers which operate on resources nested within Competition inherit\nfrom this controller class, …\n"],["Nestedmodel","","Nestedmodel.html","",""],["Object","","Object.html","",""],["Rails","","Rails.html","",""],["Rails::MyRspecGenerator","","Rails/MyRspecGenerator.html","",""],["Regularcontest","","Regularcontest.html","","<p>Regularcontest is a faily simple class which adds little to the basic\nContest class.\n"],["Regularcontestant","","Regularcontestant.html","",""],["RegularcontestsController","","RegularcontestsController.html","",""],["RegularcontestsHelper","","RegularcontestsHelper.html","",""],["ResultsRecord","","ResultsRecord.html","",""],["Scorer","","Scorer.html","","\n<pre class=\"ruby\"><span class=\"ruby-constant\">This</span> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-identifier\">defines</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-constant\">Scorer</span> <span class=\"ruby-keyword\">for</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">purpose</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">controlling</span> <span class=\"ruby-identifier\">access</span> <span class=\"ruby-identifier\">to</span>\n</pre>\n<p>the functions for Managing a Competition …\n"],["ScorerSessionsController","","ScorerSessionsController.html","",""],["ScorerSessionsHelper","","ScorerSessionsHelper.html","",""],["ScorersController","","ScorersController.html","",""],["ScorersHelper","","ScorersHelper.html","",""],["Team","","Team.html","",""],["TeamsController","","TeamsController.html","",""],["TeamsHelper","","TeamsHelper.html","",""],["Tournament","","Tournament.html","",""],["Validdate","","Validdate.html","",""],["ValiddatesController","","ValiddatesController.html","",""],["ValiddatesHelper","","ValiddatesHelper.html","",""],["Venue","","Venue.html","",""],["VenuesController","","VenuesController.html","",""],["VenuesHelper","","VenuesHelper.html","",""],["WelcomeController","","WelcomeController.html","",""],["WelcomeHelper","","WelcomeHelper.html","",""],["<=>","Contest","Contest.html#method-i-3C-3D-3E","(other_contest)",""],["advance_contestants","Bracketcontest","Bracketcontest.html#method-i-advance_contestants","()","<p>Advance teams if this Bracketcontest is referred to by the contestants of a\nsubsequent Bracketcontest …\n"],["all","Bracketgrouping","Bracketgrouping.html#method-c-all","()",""],["all_from","Bracket","Bracket.html#method-c-all_from","(bgrouping)","<p>Bracket(s) is(are) instantiated by controller via this class method\n"],["all_participant_codes","Bracketgrouping","Bracketgrouping.html#method-i-all_participant_codes","()",""],["all_subgroupings","Grouping","Grouping.html#method-i-all_subgroupings","()","<p>Groupings directly within this Grouping plus Groupings within any\ndescendants of this Grouping.\n"],["all_teams","Grouping","Grouping.html#method-i-all_teams","()","<p>Teams directly within this Grouping plus Teams within any descendants of\nthis Grouping. Ordinarily there …\n"],["as_bracket","Grouping","Grouping.html#method-i-as_bracket","()",""],["as_contestants","Team","Team.html#method-i-as_contestants","()","<p>Return an Array of all Contestants for which this is the Team.\n"],["assign_seeding_and_ccode","Bracketgrouping","Bracketgrouping.html#method-i-assign_seeding_and_ccode","(bc, seed_or_pair)",""],["authenticate","Customer","Customer.html#method-c-authenticate","(userid, password)",""],["authenticate","Manager","Manager.html#method-c-authenticate","(mgrid, mgrpw)",""],["authenticate","Scorer","Scorer.html#method-c-authenticate","(scorerid, scorerpw)",""],["authenticate_manager","Competition","Competition.html#method-c-authenticate_manager","(compid, mgrpw)",""],["away_team_id","Contest","Contest.html#method-i-away_team_id","()","<p>Team ID of Away Contestant, if any\n"],["awaycontestant_fullname","Contest","Contest.html#method-i-awaycontestant_fullname","()","<p>Full name can be customized for different contestant types.\n"],["bottom_half","Array","Array.html#method-i-bottom_half","()",""],["cancel","RegularcontestsController","RegularcontestsController.html#method-i-cancel","()","<p>PATCH/PUT /regularcontests/cancel/1 PATCH/PUT\n/regularcontests/cancel/1.json\n"],["change_manager_password","ManagersController","ManagersController.html#method-i-change_manager_password","()","<p>Assign the Manager Password if it passes Validations.\n"],["change_password","CustomersController","CustomersController.html#method-i-change_password","()","<p>GET /customer/change_password\n"],["change_scorer_password","ManagersController","ManagersController.html#method-i-change_scorer_password","()","<p>Assign the Scorer Password if it passes Validations.\n"],["choose_competition","NestedController","NestedController.html#method-i-choose_competition","()","<p>Once a Customer has been identified, the response prompts the user to\nchoose which of the Customer&#39;s …\n"],["choose_customer","ManagersController","ManagersController.html#method-i-choose_customer","()","<p>Display list of Customers for user to select one unless we ended up here\nafter a Competition has been …\n"],["choose_customer","NestedController","NestedController.html#method-i-choose_customer","()","<p>Competitions are nested within Customers. If a subclass of NestedController\ndoes not have a Competition …\n"],["clear_manager_password","Competition","Competition.html#method-i-clear_manager_password","()",""],["clear_manager_password","ManagersController","ManagersController.html#method-i-clear_manager_password","()","<p>Set Manager Password to NIL.\n"],["clear_scorer_password","Competition","Competition.html#method-i-clear_scorer_password","()",""],["clear_scorer_password","ManagersController","ManagersController.html#method-i-clear_scorer_password","()","<p>Set Scorer Password to NIL.\n"],["complete","BracketgroupingsController","BracketgroupingsController.html#method-i-complete","()","<p>GET /bracketgroupings/1\n"],["complete_se_matchups","Bracketgrouping","Bracketgrouping.html#method-i-complete_se_matchups","()","<p>Complete SingleElimination Matchups. Number of seeds is number of Teams in\nthis Bracketgrouping\n"],["contestant_class","Contest","Contest.html#method-i-contestant_class","()","<p>Attach the letters &#39;ant&#39; to the end of the class name of this\nContest subclass object to determine …\n"],["contestantlabel","Bracketcontestant","Bracketcontestant.html#method-i-contestantlabel","()","<p>Human-readable version of coded Contestant.\n"],["contestanttype","Bracketcontestant","Bracketcontestant.html#method-i-contestanttype","()","<p>Override with additional information.\n"],["contests","Grouping","Grouping.html#method-i-contests","()","<p>Return an Array of all Contests for which any Team in this Grouping is the\nTeam.\n"],["contests","Team","Team.html#method-i-contests","()","<p>Return an Array of all Contestants for which this is the Team.\n"],["create","BracketcontestsController","BracketcontestsController.html#method-i-create","()","<p>POST /bracketcontests POST /bracketcontests.json\n"],["create","CompetitionsController","CompetitionsController.html#method-i-create","()","<p>POST /competitions POST /competitions.json\n"],["create","CustomerSessionsController","CustomerSessionsController.html#method-i-create","()",""],["create","CustomersController","CustomersController.html#method-i-create","()","<p>POST /customers\n"],["create","GroupingsController","GroupingsController.html#method-i-create","()","<p>POST /groupings\n"],["create","ManagerSessionsController","ManagerSessionsController.html#method-i-create","()",""],["create","RegularcontestsController","RegularcontestsController.html#method-i-create","()","<p>POST /regularcontests POST /regularcontests.json\n"],["create","ScorerSessionsController","ScorerSessionsController.html#method-i-create","()",""],["create","TeamsController","TeamsController.html#method-i-create","()","<p>POST /teams\n"],["create","ValiddatesController","ValiddatesController.html#method-i-create","()","<p>POST /validdates POST /validdates.json\n"],["create","VenuesController","VenuesController.html#method-i-create","()","<p>POST /venues POST /venues.json\n"],["create_competition","CustomersController","CustomersController.html#method-i-create_competition","()","<p>POST /customer/create_competition\n"],["create_new_salt","Competition","Competition.html#method-i-create_new_salt","()","<p>Both passwords (manager and scorer) share the same salt. It is only\nassigned if  it is requested and …\n"],["create_root_grouping","Competition","Competition.html#method-i-create_root_grouping","()","<p>Used when creating a new Competition.\n"],["default_bracketgrouping","Bracketcontest","Bracketcontest.html#method-c-default_bracketgrouping","(bracketgrouping_id)","<p>Provide controlled public access to private class method.\n"],["default_comp","Contest","Contest.html#method-c-default_comp","(comp_id)",""],["default_comp","Contestant","Contestant.html#method-c-default_comp","(comp_id)",""],["default_comp","Grouping","Grouping.html#method-c-default_comp","(comp_id)",""],["default_comp","Nestedmodel","Nestedmodel.html#method-c-default_comp","(comp_id)",""],["default_comp","Team","Team.html#method-c-default_comp","(comp_id)","<p>Since default_scope is private, we use this to allow access.\n"],["default_comp","Validdate","Validdate.html#method-c-default_comp","(comp_id)",""],["default_comp","Venue","Venue.html#method-c-default_comp","(comp_id)",""],["default_cust","Competition","Competition.html#method-c-default_cust","(cust_id)","<p>Note that since this is not a subclass of NestedModel, we must write our\nown public method to access …\n"],["destroy","CompetitionsController","CompetitionsController.html#method-i-destroy","()","<p>DELETE /competitions/1 DELETE /competitions/1.json\n"],["destroy","GroupingsController","GroupingsController.html#method-i-destroy","()","<p>DELETE /groupings/1 DELETE /groupings/1.json\n"],["destroy","RegularcontestsController","RegularcontestsController.html#method-i-destroy","()","<p>DELETE /regularcontests/1 DELETE /regularcontests/1.json\n"],["destroy","TeamsController","TeamsController.html#method-i-destroy","()","<p>DELETE /teams/1\n"],["destroy","ValiddatesController","ValiddatesController.html#method-i-destroy","()","<p>DELETE /validdates/1 DELETE /validdates/1.json\n"],["destroy","VenuesController","VenuesController.html#method-i-destroy","()","<p>DELETE /venues/1 DELETE /venues/1.json\n"],["display_date","Contest","Contest.html#method-i-display_date","()","<p>Convenience method. Display “TBD” for nil.\n"],["display_link_array","ApplicationController","ApplicationController.html#method-i-display_link_array","()","<p>Link array for the public display portion of this application. The Display\nController should override …\n"],["display_time","Contest","Contest.html#method-i-display_time","()","<p>Convenience method. Display “TBD” for nil.\n"],["draw","Contestant","Contestant.html#method-i-draw","()","<p>Draws (when used) are when the scores are equal.\n"],["draws","Team","Team.html#method-i-draws","()","<p>Return count of all Contestants for which this is the Team and this score\nis equal to the opponent&#39;s …\n"],["dump","RegularcontestsController","RegularcontestsController.html#method-i-dump","()","<p>GET /regularcontests GET /regularcontests.json\n"],["edit","BracketcontestsController","BracketcontestsController.html#method-i-edit","()","<p>GET /bracketcontests/1/edit\n"],["edit","CompetitionsController","CompetitionsController.html#method-i-edit","()","<p>GET /competitions/1/edit\n"],["edit","CustomersController","CustomersController.html#method-i-edit","()","<p>GET /customer/edit\n"],["edit","GroupingsController","GroupingsController.html#method-i-edit","()","<p>GET /groupings/1/edit\n"],["edit","RegularcontestsController","RegularcontestsController.html#method-i-edit","()","<p>GET /regularcontests/1/edit\n"],["edit","TeamsController","TeamsController.html#method-i-edit","()","<p>GET /teams/1/edit\n"],["edit","ValiddatesController","ValiddatesController.html#method-i-edit","()","<p>GET /validdates/1/edit\n"],["edit","VenuesController","VenuesController.html#method-i-edit","()","<p>GET /venues/1/edit\n"],["encrypted_password","Competition","Competition.html#method-c-encrypted_password","(password, salt)",""],["failure_redirect","NestedController","NestedController.html#method-i-failure_redirect","()","<p>This specifies the url to redirect to if a Competition has not been\nspecified, or if an invalid Competition …\n"],["for_pair","Bracketgrouping","Bracketgrouping.html#method-i-for_pair","(bc_array)",""],["fullname","Bracketcontestant","Bracketcontestant.html#method-i-fullname","()","<p>Override with additional information.\n"],["fullname","Competition","Competition.html#method-i-fullname","()","<p>Name, Sport, and Variety of Competition, suitable for a title or heading.\n"],["fullname","Contestant","Contestant.html#method-i-fullname","()",""],["fullname","Grouping","Grouping.html#method-i-fullname","()","<p>Concatenated names from very top down to this Grouping.\n"],["game_number","Bracketgrouping","Bracketgrouping.html#method-i-game_number","()",""],["greet","CustomersController","CustomersController.html#method-i-greet","()","<p>GET /customers/1 GET /customers/1.json\n"],["greet","ManagersController","ManagersController.html#method-i-greet","()","<p>Initial page.\n"],["grouping","DisplayController","DisplayController.html#method-i-grouping","()",""],["half_size","Array","Array.html#method-i-half_size","()",""],["has_score?","Contest","Contest.html#method-i-has_score-3F","()","<p>True if either Team has a score.\n"],["has_subgroupings?","Grouping","Grouping.html#method-i-has_subgroupings-3F","()","<p>Return true iff there exists at least one Grouping that identifies this as\nits Parent.\n"],["has_teams?","Grouping","Grouping.html#method-i-has_teams-3F","()","<p>Return true iff there exists at least one Team that identifies this as its\nGrouping.\n"],["hierarchy","Grouping","Grouping.html#method-i-hierarchy","()","<p>(Recursive) Return an Array with this Grouping appended to the end of the\nArray returned by sending this …\n"],["home_team_id","Contest","Contest.html#method-i-home_team_id","()","<p>Team ID of Home Contestant, if any\n"],["homecontestant_fullname","Contest","Contest.html#method-i-homecontestant_fullname","()","<p>Full name can be customized for different contestant types.\n"],["index","BracketgroupingsController","BracketgroupingsController.html#method-i-index","()","<p>GET /bracketgroupings\n"],["index","CompetitionsController","CompetitionsController.html#method-i-index","()","<p>GET /competitions GET /competitions.json\n"],["index","DisplayController","DisplayController.html#method-i-index","()",""],["index","GroupingsController","GroupingsController.html#method-i-index","()","<p>GET /groupings GET /groupings.json\n"],["index","RegularcontestsController","RegularcontestsController.html#method-i-index","()","<p>GET /regularcontests GET /regularcontests.json\n"],["index","ScorersController","ScorersController.html#method-i-index","()","<p>Create two lists of Contests, one of Contests with scores and one of\nContests without scores.\n"],["index","TeamsController","TeamsController.html#method-i-index","()","<p>Only show Teams for this Grouping GET /grouping/1/teams\n"],["index","ValiddatesController","ValiddatesController.html#method-i-index","()","<p>GET /validdates GET /validdates.json\n"],["index","VenuesController","VenuesController.html#method-i-index","()","<p>GET /venues GET /venues.json\n"],["index","WelcomeController","WelcomeController.html#method-i-index","()",""],["instructions","ApplicationHelper","ApplicationHelper.html#method-i-instructions","()",""],["login","AdminController","AdminController.html#method-i-login","()",""],["logout","CustomerSessionsController","CustomerSessionsController.html#method-i-logout","()",""],["logout","CustomersController","CustomersController.html#method-i-logout","()",""],["logout","ManagerSessionsController","ManagerSessionsController.html#method-i-logout","()",""],["logout","ScorerSessionsController","ScorerSessionsController.html#method-i-logout","()",""],["loser_code","Bracketcontest","Bracketcontest.html#method-i-loser_code","()","<p>return the contestantcode for the Loser of this Bracketcontest\n"],["loss","Contestant","Contestant.html#method-i-loss","()","<p>But a Loss is a whole other thing…\n"],["losses","Team","Team.html#method-i-losses","()","<p>Return count of all Contestants for which this is the Team and this score\nis less than the opponent&#39;s …\n"],["manager_id","Manager","Manager.html#method-i-manager_id","()",""],["manager_link_array","ApplicationController","ApplicationController.html#method-i-manager_link_array","()","<p>Link array for Managers, who have access to everything related to the\napplication for a Competition. …\n"],["manager_password","Competition","Competition.html#method-i-manager_password","()","<p>manager_password is included on the HTML form and is sent with the HTTP\nrequest but hashed_manager_password …\n"],["manager_password=","Competition","Competition.html#method-i-manager_password-3D","(pwd)",""],["navPanel","ApplicationHelper","ApplicationHelper.html#method-i-navPanel","()","<p>Start the process to produce a (nested) Unordered List of Links for\nNavigation.\n"],["nav_Panel","ApplicationHelper","ApplicationHelper.html#method-i-nav_Panel","(nav_level, link_array )","<p>Produce an Unordered List of Links for Navigation. This may be called\nrecursively.\n\n<pre>* ul_opts = HTML options ...</pre>\n"],["nav_link_array","AdminController","AdminController.html#method-i-nav_link_array","()",""],["nav_link_array","ApplicationController","ApplicationController.html#method-i-nav_link_array","()","<p>Default link array. Should be overridden by controllers for this\napplication.\n"],["nav_link_array","CustomerSessionsController","CustomerSessionsController.html#method-i-nav_link_array","()","<p>Link Array.\n"],["nav_link_array","CustomersController","CustomersController.html#method-i-nav_link_array","()","<p>Link Array.\n"],["nav_link_array","DisplayController","DisplayController.html#method-i-nav_link_array","()","<p>Array of Grouping links can have nested Arrays of Grouping links, but it\nall starts at the top. No navigation …\n"],["nav_link_array","ManagerSessionsController","ManagerSessionsController.html#method-i-nav_link_array","()","<p>Link Array.\n"],["nav_link_array","ManagersController","ManagersController.html#method-i-nav_link_array","()","<p>Only display navigation links if we are working within a Competition. If we\nare still selecting the  …\n"],["nav_link_array","ScorersController","ScorersController.html#method-i-nav_link_array","()",""],["nav_link_array","WelcomeController","WelcomeController.html#method-i-nav_link_array","()",""],["nav_link_hash","BracketcontestsController","BracketcontestsController.html#method-i-nav_link_hash","()",""],["nav_link_to_grouping","DisplayController","DisplayController.html#method-i-nav_link_to_grouping","(grp)","<p>(Recursive) The navigation link to this grouping is followed by an Array of\nnavigation links to each …\n"],["navitem","ApplicationController","ApplicationController.html#method-i-navitem","(href, text, options={})",""],["nbyes","Tournament","Tournament.html#method-i-nbyes","()",""],["needs_no_authentication","Manager","Manager.html#method-c-needs_no_authentication","(mgrid)",""],["needs_no_authentication","Scorer","Scorer.html#method-c-needs_no_authentication","(scorerid)",""],["needs_score?","Contest","Contest.html#method-i-needs_score-3F","()","<p>True if neither Team has a score.\n"],["nested_groupings","GroupingsHelper","GroupingsHelper.html#method-i-nested_groupings","(grp_level, grouping)","<p>Produce an Unordered List of Links for Navigation. This may be called\nrecursively.\n\n<pre>* ul_opts = HTML options ...</pre>\n"],["new","BracketcontestsController","BracketcontestsController.html#method-i-new","()","<p>GET /bracketcontests/new\n"],["new","CompetitionsController","CompetitionsController.html#method-i-new","()","<p>GET /competitions/new\n"],["new","Contest","Contest.html#method-c-new","(attributes = nil, options = {})","<p>Each Contest (and all subclasses) must have two Contestants. We initialize\neach Contest with two shell …\n"],["new","CustomerSessionsController","CustomerSessionsController.html#method-i-new","()","<p>Prompts the Customer for ID and Password. The ID and Password will be used\nto authenticate the Customer …\n"],["new","CustomersController","CustomersController.html#method-i-new","()","<p>GET /customers/new\n"],["new","GroupingsController","GroupingsController.html#method-i-new","()","<p>GET /groupings/new\n"],["new","ManagerSessionsController","ManagerSessionsController.html#method-i-new","()","<p>new action requests prompt page for password. Manager ID must have been\nsupplied. If no password is required …\n"],["new","NavItem","NavItem.html#method-c-new","(href, text, options={css_class: \"nav\", target: nil})",""],["new","RegularcontestsController","RegularcontestsController.html#method-i-new","()","<p>GET /regularcontests/new\n"],["new","ResultsRecord","ResultsRecord.html#method-c-new","()",""],["new","ScorerSessionsController","ScorerSessionsController.html#method-i-new","()",""],["new","TeamsController","TeamsController.html#method-i-new","()","<p>GET /grouping/1/teams/new\n"],["new","Tournament","Tournament.html#method-c-new","(players)",""],["new","ValiddatesController","ValiddatesController.html#method-i-new","()","<p>GET /validdates/new\n"],["new","VenuesController","VenuesController.html#method-i-new","()","<p>GET /venues/new\n"],["new_competition","CustomersController","CustomersController.html#method-i-new_competition","()","<p>GET /customer/new_competition\n"],["nplayers","Tournament","Tournament.html#method-i-nplayers","()",""],["nrounds","Tournament","Tournament.html#method-i-nrounds","()",""],["opponent","Contestant","Contestant.html#method-i-opponent","()","<p>Returns instance of a descendant of Contestant class that is the other\ncontestant in the Contest with …\n"],["password","Customer","Customer.html#method-i-password","()",""],["password=","Customer","Customer.html#method-i-password-3D","(pwd)",""],["passwords","ManagersController","ManagersController.html#method-i-passwords","()","<p>Display page where Manager can set or clear either the Manager Password or\nthe Scorer Password.\n"],["pct","Team","Team.html#method-i-pct","()",""],["playoffbracketlabels","Competition","Competition.html#method-c-playoffbracketlabels","()",""],["points","Team","Team.html#method-i-points","()","<p>Used for soccer results.\n"],["poolgroupseasonlabels","Competition","Competition.html#method-c-poolgroupseasonlabels","()",""],["priorcontest","Bracketcontestant","Bracketcontestant.html#method-i-priorcontest","()","<p>Prior Bracketcontest referred to by this Contestant.\n"],["record_result","Bracketcontest","Bracketcontest.html#method-i-record_result","(homescore, awayscore, status=\"COMPLETED\")","<p>Assign score to each Bracketcontestant and status to entire Bracketcontest.\nSave all three records in …\n"],["record_result","Contest","Contest.html#method-i-record_result","(homescore, awayscore, status=\"COMPLETED\")","<p>Assign score to each Contestant and status to entire Contest. Save all\nthree records in a single transaction. …\n"],["report","ScorersController","ScorersController.html#method-i-report","()","<p>PATCH for reporting a score or correcting a score. Note that we can report\nthe score of any type of  …\n"],["result_headings","Competition","Competition.html#method-i-result_headings","()","<p>Display table headings for Standings for a Grouping or for a Team&#39;s\nrecord.\n"],["result_row","Team","Team.html#method-i-result_row","(competition)","<p>Varies by sport\n"],["roundrobin","RegularcontestsController","RegularcontestsController.html#method-i-roundrobin","()","<p>POST/regularcontests/roundrobin POST /regularcontests/roundrobin.json\n"],["roundrobin2","RegularcontestsController","RegularcontestsController.html#method-i-roundrobin2","()","<p>POST/regularcontests/roundrobin POST /regularcontests/roundrobin.json\n"],["rrobin","RegularcontestsController","RegularcontestsController.html#method-i-rrobin","()","<p>GET/regularcontests/rrobin GET /regularcontests/rrobin.json\n"],["save","Competition","Competition.html#method-i-save","()","<p>Override by adding creation of a root Grouping if this save is a creation\nsave ass opposed to an update …\n"],["save_all!","Contest","Contest.html#method-i-save_all-21","()",""],["scorer_id","Scorer","Scorer.html#method-i-scorer_id","()",""],["scorer_link_array","ApplicationController","ApplicationController.html#method-i-scorer_link_array","()","<p>Link array for scorers, who can also open up the public display portion of\nthis application in a separate …\n"],["scorer_password","Competition","Competition.html#method-i-scorer_password","()","<p>scorer_password is included on the HTML form and is sent with the HTTP\nrequest but hashed_scorer_password …\n"],["scorer_password=","Competition","Competition.html#method-i-scorer_password-3D","(pwd)",""],["se_matchups","Bracketgrouping","Bracketgrouping.html#method-i-se_matchups","(numseeds)","<p>SingleElimination Matchups. Takes the number of seeds (i.e. Teams)\n"],["se_matchups","Object","Object.html#method-i-se_matchups","(numseeds)","<p>SingleElimination Matchups. Takes the number of seeds (i.e. Teams)\n"],["seed","Tournament","Tournament.html#method-i-seed","()",""],["set_bracketgrouping","BracketcontestsController","BracketcontestsController.html#method-i-set_bracketgrouping","()",""],["set_competition","NestedController","NestedController.html#method-i-set_competition","(competition_id)","<p>If a Competition has been specified, then set the scope for all nested\nresources to that Competition …\n"],["show","BracketcontestsController","BracketcontestsController.html#method-i-show","()","<p>GET /bracketcontests/1 GET /bracketcontests/1.json\n"],["show","BracketgroupingsController","BracketgroupingsController.html#method-i-show","()","<p>GET /bracketgroupings/1\n"],["show","CompetitionsController","CompetitionsController.html#method-i-show","()","<p>GET /competitions/1 GET /competitions/1.json\n"],["show","GroupingsController","GroupingsController.html#method-i-show","()","<p>GET /groupings/1 GET /groupings/1.json\n"],["show","RegularcontestsController","RegularcontestsController.html#method-i-show","()","<p>GET /regularcontests/1 GET /regularcontests/1.json\n"],["show","TeamsController","TeamsController.html#method-i-show","()","<p>GET /teams/1\n"],["show","ValiddatesController","ValiddatesController.html#method-i-show","()","<p>GET /validdates/1 GET /validdates/1.json\n"],["show","VenuesController","VenuesController.html#method-i-show","()","<p>GET /venues/1 GET /venues/1.json\n"],["statuses","Contest","Contest.html#method-c-statuses","()","<p>Create a collection of contest statuses. This will be used to display\nselection choices and for validation. …\n"],["subgroupings","Grouping","Grouping.html#method-i-subgroupings","()","<p>Return the Collection of Groupings that identify this as their Parent.\n"],["team","DisplayController","DisplayController.html#method-i-team","()",""],["teamname","Contestant","Contestant.html#method-i-teamname","()",""],["times","Contest","Contest.html#method-c-times","()","<p>Create a collection of times throughout the day in five minute increments.\nThis will be used to display …\n"],["top_grouping","Grouping","Grouping.html#method-c-top_grouping","()","<p>sending this method to the parent of this Grouping.\n"],["top_half","Array","Array.html#method-i-top_half","()",""],["update","BracketcontestsController","BracketcontestsController.html#method-i-update","()","<p>PATCH/PUT /bracketcontests/1 PATCH/PUT /bracketcontests/1.json\n"],["update","CompetitionsController","CompetitionsController.html#method-i-update","()","<p>PATCH/PUT /competitions/1 PATCH/PUT /competitions/1.json\n"],["update","CustomersController","CustomersController.html#method-i-update","()","<p>PATCH/PUT /customers/1\n"],["update","GroupingsController","GroupingsController.html#method-i-update","()","<p>PATCH/PUT /groupings/1 PATCH/PUT /groupings/1.json\n"],["update","RegularcontestsController","RegularcontestsController.html#method-i-update","()","<p>PATCH/PUT /regularcontests/1 PATCH/PUT /regularcontests/1.json\n"],["update","TeamsController","TeamsController.html#method-i-update","()","<p>PATCH/PUT /teams/1\n"],["update","ValiddatesController","ValiddatesController.html#method-i-update","()","<p>PATCH/PUT /validdates/1 PATCH/PUT /validdates/1.json\n"],["update","VenuesController","VenuesController.html#method-i-update","()","<p>PATCH/PUT /venues/1 PATCH/PUT /venues/1.json\n"],["update_password","CustomersController","CustomersController.html#method-i-update_password","()","<p>PATCH/PUT /customers/1\n"],["venue_name","Contest","Contest.html#method-i-venue_name","()","<p>Convenience method. Display “TBD” for nil.\n"],["win","Contestant","Contestant.html#method-i-win","()","<p>A Win is a Win…\n"],["winner_code","Bracketcontest","Bracketcontest.html#method-i-winner_code","()","<p>return the contestantcode for the Winner of this Bracketcontest\n"],["wins","Team","Team.html#method-i-wins","()","<p>Return count of all Contestants for which this is the Team and this score\nis more than the opponent&#39;s …\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}